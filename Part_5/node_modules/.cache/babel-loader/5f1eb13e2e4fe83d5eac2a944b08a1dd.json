{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilizador\\\\Documents\\\\GitHub\\\\FullStack\\\\Part_5\\\\src\\\\components\\\\Togglable.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useImperativeHandle, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Togglable = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [visible, setVisibility] = useState(false);\n  const hideWhenVisible = {\n    display: visible ? 'none' : ''\n  };\n  const showWhenVisible = {\n    display: visible ? '' : 'none'\n  };\n\n  const toggleVisibility = () => {\n    setVisibility(!visible);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: hideWhenVisible,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVisibility,\n        children: props.buttonLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: showWhenVisible,\n      className: \"togglableContent\",\n      children: [props.children, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVisibility,\n        children: \"cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}, \"420FeRoaJxyRJZYC7iJAcX1W4Cg=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = Togglable;\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n};\nTogglable.displayName = 'Togglable';\nexport default Togglable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Togglable$forwardRef\");\n$RefreshReg$(_c2, \"Togglable\");","map":{"version":3,"sources":["C:/Users/Utilizador/Documents/GitHub/FullStack/Part_5/src/components/Togglable.js"],"names":["useState","useImperativeHandle","forwardRef","PropTypes","Togglable","props","ref","visible","setVisibility","hideWhenVisible","display","showWhenVisible","toggleVisibility","buttonLabel","children","propTypes","string","isRequired","displayName"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,mBAAnB,EAAwCC,UAAxC,QAA0D,OAA1D;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,SAAS,gBAAGF,UAAU,SAAC,CAACG,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAC3C,QAAM,CAACC,OAAD,EAAUC,aAAV,IAA2BR,QAAQ,CAAC,KAAD,CAAzC;AAEA,QAAMS,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,OAAO,GAAG,MAAH,GAAY;AAA9B,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,OAAO,GAAG,EAAH,GAAQ;AAA1B,GAAxB;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,aAAa,CAAC,CAACD,OAAF,CAAb;AACD,GAFD;;AAIAN,EAAAA,mBAAmB,CAACK,GAAD,EAAM,MAAM;AAC7B,WAAO;AACLM,MAAAA;AADK,KAAP;AAGD,GAJkB,CAAnB;AAMA,sBACE;AAAA,4BACE;AAAK,MAAA,KAAK,EAAEH,eAAZ;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEG,gBAAjB;AAAA,kBAAoCP,KAAK,CAACQ;AAA1C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,KAAK,EAAEF,eAAZ;AAA6B,MAAA,SAAS,EAAC,kBAAvC;AAAA,iBACGN,KAAK,CAACS,QADT,eAEE;AAAQ,QAAA,OAAO,EAAEF,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA3B2B;AAAA,UAU1BX,mBAV0B;AAAA,GAA5B;MAAMG,S;AA6BNA,SAAS,CAACW,SAAV,GAAsB;AACpBF,EAAAA,WAAW,EAAEV,SAAS,CAACa,MAAV,CAAiBC;AADV,CAAtB;AAIAb,SAAS,CAACc,WAAV,GAAwB,WAAxB;AAEA,eAAed,SAAf","sourcesContent":["import { useState, useImperativeHandle, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = forwardRef((props, ref) => {\n  const [visible, setVisibility] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisibility(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} className=\"togglableContent\">\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nTogglable.displayName = 'Togglable'\n\nexport default Togglable"]},"metadata":{},"sourceType":"module"}